data Pair A B = pair A B 

data ParseError = err

interface Parser = fail : ParseError -> Char
                 | sat : {Char -> Bool} -> Char
                 | choose : {[Parser] Char} -> {[Parser] Char} -> Char

runParser : (List Char) -> <Parser>Char -> 
            Either ParseError (Pair Char (List Char))
runParser xs r = right (pair r xs)
runParser _ <fail err -> _> = left err
runParser nil <sat p -> k> = left err
runParser (x::xs) <sat p -> k> = 
  if (p x) {runParser xs (k x)} {runParser nil (fail err)}
runParser xs <choose p1 p2 -> k> = 
  on (runParser xs p1!)
    { (right _) -> runParser xs p1!
    | (left err) -> on (runParser xs p2!) 
      { (right _) -> runParser xs p2!
      | (left err) -> left err
      }
    }

parse : (List Char) -> {[Parser]Char} -> 
        Either ParseError Char
parse xs p = on (runParser xs p!) 
  { (right (pair y ys)) -> right y 
  | (left          err) -> left err
  } 

char : Char -> [Parser]Char
char c = sat {x -> eqChar x c}

letter : [Parser]Char
letter! = sat isLetter

space : [Parser]Char
space! = char ' '


-- main : {Either ParseError (Pair Char (List Char))}
-- main! = runParser "ab" (sat {x -> eqChar x 'a'})

-- string : (List Char) -> [Parser(List Char)](List Char)
-- string str = map char str 

-- many : {[Parser X]Y} -> [Parser X](List Y) 
-- many p = choose {p! :: many p} {nil}

-- main : {Either ParseError Char}
-- main! = parse "ab" (char 'a')

-- main : {Either ParseError (List Char)}
-- main! = parse "ab" (string "ab")

-- ex : [Parser Char, Console]Unit
-- ex! = on (char 'a') { (right x) -> ouch x
--                     | (left e)  -> unit}

-- ex : [Console]Unit
-- ex! = ouch 'a'


-- main : {Either ParseError (Pair Char (List Char))}
-- main! = runParser "abcsdf dsdsd" (
--   choose {sat {x -> eqChar x 'b'}} {sat {x -> true}}
--   )

-- main : [Console]Unit
-- main! = parse "ab" (ex!)

-- main : {Either ParseError (List Char)}
-- main! = parse "ab" (many {char 'a'})
