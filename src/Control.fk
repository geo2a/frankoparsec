--   X >> Y [] Y
--   x >> y = y

--   X >>= {X -> [] Y} [] Y
--   x >>= f = f x

-- sequencing
on : X -> {X -> Y} -> Y
on x f = f x

-- lazy conditional
if : Bool -> {X} -> {X} -> X
if true  t f = t!
if false t f = f!

map : {{X -> Y} -> List X -> List Y}
map f nil         = nil
map f (cons x xs) = cons (f x) (map f xs)

foldl : {{Y -> X -> Y} -> Y -> (List X) -> Y}
foldl g acc nil       = acc
foldl g acc (x :: xs) = foldl g (g acc x) xs


