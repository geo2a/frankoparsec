{--- Booleans ---}

data Bool = true | false

and : Bool -> Bool -> Bool
and false false = false
and false true  = false
and true false  = false
and true true   = true

{--- Natural numbers and Ints ---}

data Nat = zero | suc Nat

eqNat : Nat -> Nat -> Bool
eqNat zero zero  = true
eqNat (suc x) (suc y) = eqNat x y
eqNat zero _     = false
eqNat _  zero    = false

plusNat : Nat -> Nat -> Nat
plusNat zero y = y
plusNat (suc x) y = suc (plusNat x y)

eqInt : Int -> Int -> Bool
eqInt 0 0 = true
eqInt 0 _ = false
eqInt _ 0 = false
eqInt x y = eqInt (x - 1) (y - 1)

{--- Lists ---}

append : List X -> List X -> List X
append nil ys         = ys
append (cons x xs) ys = cons x (append xs ys)

concat : (List (List X)) -> List X
concat xs = foldl {x y -> append x y} nil xs

length : (List X) -> Int
length xs = foldl {acc _ -> acc + 1} 0 xs

{--- Other ---}

data Zero =     -- empty type

data Maybe A = just A | nothing

data Either A B = left A | right B

data Pair A B = pair A B
