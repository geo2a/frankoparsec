note Needs List.fk

data Nat
  = zero
  | suc Nat

Nat == Nat [] Bool
zero  == zero  = tt
suc x == suc y = x == y
_     == z     = ff

Nat + Nat [] Nat
zero  + y = y
suc x + y = suc (x + y)

note 
  natToString Nat [] List Char
  natToString zero    = 'z' :: ('e' :: ('r' :: ('o' :: (',' :: (' ' :: nil)))))
  natToString (suc n) = 's' :: ('u' :: ('c' :: (' ' :: natToString n)))
  
