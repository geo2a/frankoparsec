data Pair A B = pair A B

interface Parser X Y = fail : Zero
                     | sat : {X -> Bool} -> X
                     | choose : {[Parser X Y] Y} -> {[Parser X Y] Y} -> Y
                     -- | many : {[Parser X (List Y)] (List Y)} -> List Y

runParser : (List X) -> <Parser X Y>Y ->
            Pair (Maybe Y) (List X)
runParser xs r = pair (just r) xs
runParser xs <fail -> _> = pair nothing xs
runParser nil <sat p -> k> = pair nothing nil
runParser (x::xs) <sat p -> k> =
  if (p x) {runParser xs (k x)} {pair nothing (x::xs)}
runParser xs <choose p1 p2 -> k> =
  on (runParser xs p1!)
    { (pair (just _) _) -> runParser xs p1!
    | (pair nothing _) -> on (runParser xs p2!)
      { (pair (just _) _) -> runParser xs p2!
      | (pair nothing _) -> pair nothing xs
      }
    }
-- runParser xs <many p -> k> =
--   on (runParser xs p!)
--     { (pair (just ok) rest) -> pair (just ok) rest -- (runMultiParser rest (many p; k nil))
--     | (pair nothing _) -> pair nothing nil -- runParser xs (k nil)
--     }

char : Char -> [Parser Char Char]Char
char c = sat {x -> eqChar x c}

string : (List Char) -> [Parser Char (List Char)](List Char)
string str = map char str

main : {Pair (Maybe Char) (List Char)}
main! = runParser "ab" (char 'a')
