interface MultiParser = singleton : {[Parser] Char} -> List Char
                      | many : {[Parser] Char} -> List Char

runMultiParser : (List Char) -> <MultiParser>(List Char) ->
                 Either ParseError (List Char)
runMultiParser _ r = right r
runMultiParser xs <singleton p -> k> =
  on (runParser xs p!) { (right (pair ok rest)) ->
                            right (ok :: nil)
                       | (left err) -> left err
                       }
runMultiParser xs <many p -> k> =
  on (runParser xs p!)
    { (right (pair ok rest)) -> ok :: (runMultiParser rest (many p; k nil))
    | (left err) -> runMultiParser xs (k nil)
    }

-- runMultiParser : (List Char) -> <MultiParser>1(List Char) -> List Char
-- runMultiParser _ r = r
-- runMultiParser xs <singleton p -> k> =
--   on (runParser xs p!) { (right (pair ok rest)) ->
--                             ok :: (runMultiParser rest (k nil))
--                        | (left  _) -> nil
--                        }
-- runMultiParser xs <many p -> k> =
--   on (runParser xs p!)
--     { (right (pair ok rest)) -> ok :: (runMultiParser rest (many p; k nil))
--     | (left err) -> runMultiParser xs (k nil)
--     }

-- word : [MultiParser](List Char)
-- word! = many letter

-- -- main : {List Char}
-- -- main! = runMultiParser "aab vfd" (many {char 'a'}; singleton {char 'b'})

-- main : {List Char}
-- main! = runMultiParser "aab vfd" (word!; singleton space; word!)

main : {Either ParseError (List Char)}
main! = runMultiParser "abc vfd" (singleton letter; singleton letter)
